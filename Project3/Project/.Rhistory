x<-4L
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- c(1,3, 5) y <- c(3, 2, 10)
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x, y)
x <- list(2, "a", "b", TRUE)
x[[2]]
x <- 1:4
y <- 2:3
x + y
class(x+y)
x <- c(3, 5, 1, 10, 12, 6)
x[x %in% 1:5] <- 0
x
miss <- is.na(dataset[, "Ozone"])
miss <- is.na(data[, "Ozone"])
help()
help(mean)
mean(1:100)
?mean
??mean
help.search(mean)
help.search("mean")
??mean
??mean
clear
cl scr
cls
example(rnorm)
help(mean)
example(rnorm)
x->10
x<-10
y <- in[1:2]
y <- int[1:2]
y <- integer[1:2]
help(integer)
clear
x
y
print x
print(x)
demo()
clear
demo(package=.all.available=TRUE)
demo(package=.packages(all.available=TRUE)
demo(package = .packages(all.available = TRUE)
install.packages("swirl")
library("swirl")
swirl()
swirl()
exit
swirl()
install.packages("swirl")
library("swirl")
swirl()
swirl
swirl()
bye
swirl_out()
swirl()
bye()
library(swirl)
install_course_zip("~/Downloads/swirl_courses-master.zip", multi=TRUE)
install_course_zip("~/swirl_courses-master.zip", multi=TRUE)
install_course_zip("~/swirl_courses-master.zip", multi=TRUE)
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x >0]
x[!is.na(x) & x > 0]
c(x[1:30,2])
c(x[1:30 , 2])
c(x[1:30])
c(3, 5, 7)
[c(3, 5, 7)]
y[c(3, 5, 7)]
info()
info()
main()
c(3, 5, 7)
a <- c(3, 5, 7)
c[c(3, 5, 7)]
b[c(3, 5, 7)]
s[c(3, 5, 7)]
a[c(3, 5, 7)]
x[c(3, 5, 7)]
x(x[0])
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
name()
names()
names(vect)
vect2 <- c(11, 2, NA)
names(vect2 <- c("foo", "bar", "norf")
names(vect2 <- c("foo", "bar", "norf"))
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
o
eit
bye
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
getwd(
)
q()
library("swirl")
swirl()
my_vector <- [1:20]
my_vector <- (1:200
)
my_vector <- c(1:20)
my_vector <- (1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(4, 5)
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- ("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data) -< cnames
colnames(my_data) <- cnames
my_data
a == b
a <- "TRUE"
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5!=7
5 != 7
5 !== 7
5 == 7
5 !== 7
5 !TRUE 7
5 !FALSE 7
!5 == 7
TRUE & TRUE
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(c(TRUE, FALSE, TRUE))
which(ints > 5)
which(TRUE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE  TRUE FALSE)
which(TRUE, FALSE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, TRUE, FALSE)
which(c(TRUE, FALSE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, TRUE, FALSE))
which(c(ints > 5)
)
which(c(ints > 5))
which(c('ints > 5'))
which(c("ints > 5"))
info()
?which()
which(c(TRUE, FALSE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, TRUE, FALSE))
which(ints > 7)
any(ints)
any(ints<0)
any(ints>0)
any(ints > 0)
all(ints > 0)
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_list1 <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(range())
range(lapply)
lapply(flag_colors,range)
lapply(flag_shapes,range)
shape_mat <- lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
cla(shape_mat)
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6 ))
unique_vals <- lapply(flags,unique)
unique_vals
leng(unique_vals)
length(unique_vals)
sapply(unique_vals,length)
sapply(flag_shapes,unique)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok
vapply(flags, unique, numeric(1)) ok
vapply(flags, unique, numeric(1))
ok()
sapply(flags,unique)
sapply(flags, class)
vapply(flags, unique, character(1))
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
exit
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
library(swirl)
install_course_zip("~/Downloads/swirl_courses-master.zip")
install_course_zip("/Downloads/swirl_courses-master.zip")
getwd()
install_course_zip("~/Coursera/swirl_courses-master.zip")
swirl()
swirl()
install.packages(c("boot", "class", "cluster", "codetools", "digest", "foreign", "httr", "jsonlite", "KernSmooth", "lattice", "manipulate", "MASS", "Matrix", "mgcv", "nlme", "nnet", "RCurl", "rpart", "spatial", "survival"))
install.packages(c("boot", "class", "cluster", "codetools", "digest",
""
install.packages(c("boot", "class", "cluster", "codetools", "digest", "foreign", "httr", "jsonlite", "KernSmooth", "lattice", "manipulate", "MASS", "Matrix", "mgcv", "nlme", "nnet", "RCurl", "rpart", "spatial", "survival"))
install.packages(c("boot", "class", "cluster", "codetools", "digest",
swirl
install("swirl")
install.packages(swirl)
library("swirl")
swirl()
assign("cars", openintro::cars, envir=globalenv())
openintro
install.packages("devtools")
library(devtools)
http://cran.r-project.org/bin/windows/Rtools/ and then run find_rtools()
install_course_zip("C:\Users\Viswanathanb\AppData\Local\Temp\RtmpqCSBUM\downloaded_packages")
install_course_zip("~Temp\RtmpqCSBUM\downloaded_packages")
install_course_zip("~\Temp\RtmpqCSBUM\downloaded_packages")
install_course_zip("\downloaded_packages")
install_course_zip("downloaded_packages")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library("devtools")
install.packages("devtools")
library(devtools)
libr
library(swirl)
swirl()
install.packages("devtools")
install.packages("devtools")
install.packages("C:\Users\Viswanathanb\AppData\Local\Temp\RtmpApGiYM\downloaded_packages")
install_course_zip("C:\Users\Viswanathanb\AppData\Local\Temp\RtmpApGiYM\downloaded_packages",multi=TRUE)
exit
bye
bye()
quit
install_course_zip("C:\Users\Viswanathanb\AppData\Local\Temp\RtmpApGiYM\downloaded_packages",multi=TRUE)
install_course_zip("~/Downloads/devtools_1.8.0.zip",multi=TRUE)
install_course_zip("~/Downloads/devtools_1.8.0.zip",multi=TRUE)
swirl()
library(swirl)
swirl()
install_course_zip("~/Downloads/devtools_1.8.0.zip",multi=TRUE)
install_course_zip("~/devtools_1.8.0.zip",multi=TRUE)
library(devtools)
install_course_zip("~/devtools_1.8.0.zip",multi=TRUE)
library(devtools)
install_github("swirldev/swirl")
install_github("swirldev/swirl")
update.packages(ask='graphics',checkBuilt=TRUE)
chooseCRANmirror()
utils:::menuInstallLocal()
q()
install.packages("ggplot2", dependencies = T)
install.packages("knitr", dependencies = T)
install.packages("dplyr", dependencies = T)
g1 <- ggplot(data=df, aes(x=chlorides)) + geom_histogram(aes(fill=..count..) + stat_smooth(), binwidth=0.005 )
warnings()
warning
install.packages("rpart")
warnings()
install.packages("rpart.plot")
install.packages("Grid2Polygons")
install.packages("RColorBrewer")
install.packages(c("party", "partykit"))
install.packages("randomForest")
```{r Data Exploration}
scale_fill_gradient("Count", low = "green", high = "red") binwidth = 0.2)
setwd("~/GitHub/Udacity/Project3/Project")
df <- read.csv('wineQualityWhites.csv')
dim(df)
str(df)
summary(df)
View(df)
install.packages(c("lme4", "maps"))
df
summary(df)
dim(df)
str(df)
dim(df)
summary(df)
df
head(df)
